/*1-----Create Your First CSS Grid*/

.container {
    font-size: 40px;
    width: 100%;
    background: LightGray;
    display: grid;
}


/*2-----Add Columns with grid-template-columns*/

.container {
    font-size: 40px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 100px 100px 100px;
}


/*3-----Add Rows with grid-template-rows*/

.container {
    font-size: 40px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 100px 100px 100px;
    grid-template-rows: 50px 50px;
}


/*4-----Use CSS Grid units to Change the Size of Columns and Rows*/

.container {
    font-size: 40px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 1fr 100px 2fr;/
    grid-template-rows: 50px 50px;
}


/*5-----Create a Column Gap Using grid-column-gap*/

.container {
    font-size: 40px;
    min-height: 300px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-column-gap: 20px;
}


/*6-----Create a Row Gap using grid-row-gap*/

.container {
    font-size: 40px;
    min-height: 300px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-row-gap: 5px;
}


/*7-----Add Gaps Faster with grid-gap*/

.container {
    font-size: 40px;
    min-height: 300px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px 20px;
}


/*8-----Use grid-column to Control Spacing*/

.item5 {
    background: PaleGreen;
    grid-column: 2 / 4;
}


/*9-----Use grid-row to Control Spacing*/

.item5 {
    background: PaleGreen;
    grid-column: 2 / 4;
    grid-row: 2 / 4;
}


/*10-----Align an Item Horizontally using justify-self*/

.item2 {
    background: LightSalmon;
    justify-self: center;
}


/*11-----Align an Item Vertically using align-self*/

.item3 {
    background: PaleTurquoise;
    align-self: end;
}


/*12-----Align All Items Horizontally using justify-items*/

.container {
    font-size: 40px;
    min-height: 300px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
    justify-items: center;
}


/*13-----Align All Items Vertically using align-items*/

.container {
    font-size: 40px;
    min-height: 300px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
    align-items: end;
}


/*14-----Divide the Grid Into an Area Template*/

.container {
    font-size: 40px;
    min-height: 300px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
    grid-template-areas:
            "header header header"
            "advert content content"
            "footer footer footer";
}


/*15-----Place Items in Grid Areas Using the grid-area Property*/

.item5 {
    background: PaleGreen;
    grid-area: footer;
}


/*16-----Use grid-area Without Creating an Areas Template*/

.item5 {
    background: PaleGreen;
    grid-area: 3/1/4/4;
}


/*17-----Reduce Repetition Using the repeat Function*/

.container {
    font-size: 40px;
    min-height: 300px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
}


/*18-----Limit Item Size Using the minmax Function*/

.container {
    font-size: 40px;
    min-height: 300px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: repeat(3, minmax(90px, 1fr));
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
}


/*19-----Create Flexible Layouts Using auto-fill*/

.container {
    font-size: 40px;
    min-height: 100px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
}


/*20-----Create Flexible Layouts Using auto-fit*/

.container2 {
    font-size: 40px;
    min-height: 100px;
    width: 100%;
    background: Silver;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
}


/*21-----Use Media Queries to Create Responsive Layouts*/

@media (min-width: 400px){
    .container{
        grid-template-areas:
                "header header"
                "advert content"
                "footer footer";
    }
}


/*22-----Create Grids within Grids*/

.item3 {
    background: PaleTurquoise;
    grid-area: content;
    display: grid;
    grid-template-columns: auto 1fr;
}